// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `"	test Example"`;

exports[` 2`] = `"	test Example?"`;

exports[` 3`] = `"	test Example @default(Foo)"`;

exports[` 4`] = `"	test Example? @default(Foo)"`;

exports[`zen-stack-ts enum block generation should generate an enum 1`] = `
"enum Example {
	Qux
	// This is a comment
	Foo
	Bar @map("Baz")
}"
`;

exports[`zen-stack-ts enum block generation should generate an enum with a comment 1`] = `
"// An Enum with a comment
enum Example {
	Qux
	// This is a comment
	Foo
	Bar @map("Baz")
}"
`;

exports[`zen-stack-ts should generate the schema 1`] = `
"// zen-stack-ts https://github.com/bacali95/zen-stack-ts - generated in x ms ---
// datasource ----------------------------------------------------------------------

datasource db {
	url                   = env("DATABASE_URL")
	directUrl             = env("DATABASE_DIRECT_URL")
	provider              = "mysql"
	shadowDatabaseUrl     = env("DATABASE_SHADOW_URL")
	referentialIntegrity  = "prisma"
}

// generators ----------------------------------------------------------------------

generator client {
	provider         = "prisma-client-js"
	binaryTargets    = ["native","rhel-openssl-1.0.x","linux-arm64-openssl-1.0.x","darwin-arm64"]
	previewFeatures  = ["referentialIntegrity"]
}

// enums ---------------------------------------------------------------------------

// This is the Role Enum
enum Role {
	// This is the admin role
	ADMIN @map("admin")
	USER @map("user")
	// This is the owner role
	OWNER @map("owner")
}

enum Foo {
	Bar
	Baz
}

// models --------------------------------------------------------------------------

abstract model Abstract {
	createdAt        DateTime  @default(now())
	updatedAt        DateTime  @updatedAt @db.Date(6)
	@@index([mixin, index])
}

// This is the User model
model User extends Abstract {
	id                                       Int        @id @default(autoincrement()) @map("_id") @db.Value('foo')
	email                                    String     @unique @db.VarChar(4) @email(message: "This should be a valid email")
	name                                     String?    @length(min: 1, max: 10) @allow("read", auth() != null)
	name2                                    String     @startsWith(text: "test") @endsWith(text: "test") @contains(text: "test")
	name3                                    String     @url @datetime @regex(regex: ".*")
	// The user model
	height                                   Float      @default(1.8) @gt(value: 1) @lte(value: 10)
	// The user model
	width                                    Float      @default(2.8) @gte(value: 1) @lt(value: 10)
	role                                     Role?      @default(USER) @deny("all", auth() == null)
	foo                                      Foo
	bar                                      Foo?
	password                                 String     @password(saltLength: 10) @omit
	// Relations are cool
	posts                                    Post[]     @relation("WrittenPosts")
	pinned                                   Post?      @relation("PinnedPost")
	@@validate(contains(email, "test"))
	@@allow("all", auth().id != 1)
	@@deny("all", auth() == null)
	@@prisma.passthrough("@@index(["id"])")
}

model Post extends Abstract {
	id                 Int      @id @default(autoincrement()) @db.UnsignedSmallInt
	published          Boolean  @default(false)
	title              String
	authorId           Int?
	author             User?    @relation("WrittenPosts", fields: [authorId], references: [id], onUpdate: Restrict, onDelete: SetNull)
	pinnedById         Int?
	pinnedBy           User?    @relation("PinnedPost", fields: [pinnedById], references: [id])
	stars              Star[]
	@@map("comments")
}

model Star extends Abstract {
	id                     Int                      @id @default(autoincrement())
	decimal                Decimal                  @db.Decimal(10, 20)
	postId                 Int?
	post                   Post                     @relation(fields: [postId], references: [id])
	location               Unsupported("polygon")?
	@@unique([A, B], map: "_AB_unique")
	// Block level comments?
	@@index([wow], map: "_B_index")
	@@map("Group")
	@@fulltext([location, decimal])
}"
`;
